<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- Spring Boot Parent POM, which provides dependency management for Spring 
		Boot applications -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.18</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.example</groupId>
	<artifactId>spring_boot_backend_template</artifactId>
	<version>0.0.1</version>
	<name>spring_boot_backend_template</name>
	<description>Template Project for Spring Boot based Backend</description>

	<properties>
		<!-- Specify the Java version to use -->
		<java.version>11</java.version>
	</properties>

	<dependencies>

		<!-- ====== Spring Boot Starters ====== -->

		<!-- Spring Boot Starter for building RESTful web services and web applications -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>


		<!-- Spring Boot Starter for Spring Data JPA, includes Hibernate for ORM 
			support -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- Spring Boot Starter for Spring Security to handle authentication and 
			authorization -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<!-- Spring Boot Starter for Java Bean validation, which enables server-side 
			validation for models -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- Devtools for auto-restart and live reload in development. Improves 
			development experience by auto-refreshing application after code changes -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope> <!-- Used during development, not required in production -->
			<optional>true</optional>
		</dependency>

		<!-- Spring Boot Starter for testing, includes JUnit, Mockito, and Spring 
			Boot Test helpers -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope> <!-- Only used during testing -->
		</dependency>

		<!-- Spring Security Test utilities to test security-related features in 
			your Spring Boot application -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- ====== Database and ORM ====== -->

		<!-- MySQL database connector, necessary for connecting Spring Boot with 
			MySQL database -->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope> <!-- Only used at runtime for database operations -->
		</dependency>

		<!-- ====== Documentation and API ====== -->

		<!-- SpringDoc OpenAPI UI for generating interactive API documentation 
			(Swagger UI) -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.7.0</version> <!-- Ensure you are using the latest version of OpenAPI -->
		</dependency>

		<!-- ====== Utility Libraries ====== -->

		<!-- ModelMapper for automating the mapping of DTOs and Entities in the 
			application -->
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>3.0.0</version>
		</dependency>

		<!-- Apache Commons IO library provides utilities for handling IO operations 
			such as file management -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.11.0</version>
		</dependency>

		<!-- Apache Commons Lang library offers utilities for manipulating core 
			Java classes (e.g., String and Number) -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<!-- Lombok is a tool that simplifies coding by generating boilerplate 
			code like getters, setters, and constructors -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- JWT -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.2</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.2</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if you prefer -->
			<version>0.11.2</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
